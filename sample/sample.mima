#Definitions;
§define negative_one;         #declaration of memory address#
§define one : 0;              #adresses can also be explicit#
§define zero,#inline# val;    #declarations can have multiple variables in one line
§define const x : 5;          #constants are referred to as is and
                              #need to have an initializer statement

#Instructions
       LDC(x);   #LDC only takes constant values

       STV(val); #function arguments are put into parenthesis
                 #and are separated by ','
       LDC(0);
       STV(zero);

       LDC(~0001); #binary values begin with '~' and may omit leading 0s
       STV(one);

       NOT(); #Calls with no arguments still need the parenthesis

       ADD(one);
       STV(negative_one);

§define pow; #definitions can appear anywhere,
             #but must stated before using the variable

#jump declaration (*)
Loop : LDV(val);
       EQL(zero);

       JMN(Stop); #references are used as arguments
       LDV(val);
       ADD(negative_one);
       STV(val);

       JMP(Loop); #jumps to (*)

Stop : HALT(); #stop the program