#-------------------------------------------------#
# Sample Mima program that counts down from x = 5 #
#-------------------------------------------------#

#Definitions:
§define negative_one;         #Declaration of memory address.
§define one = 0;              #Adresses can also be explicit.
§define zero,#inline# val;    #Declarations can have multiple variables in one line.
§define const x = 5;          #Constants are referred to as is and
                              #need to have an initializer statement.
#Instructions:
       LDC(x);   #LDC only takes constant values.

       STV(val); #Function arguments are put into parenthesis
                 #and are separated by ','.
       LDC(0);
       STV(zero);

       LDC(~0001); #Binary values begin with '~' and may omit leading 0s.
       STV(one);

       NOT(); #Calls with no arguments still need the parenthesis.

#Scopes:

#Use scopes to overshadow defined names.
#Only variables from the sa me or outer scopes can be accessed.
#Same applies for jumps: You can only jump into the same or outer scopes
#                        The inner scope jump will be preferred.
#                        Overshadowing jump points is highly discouraged as it is
#                        unnecessarily confusing
#Once left the scope constant are lost and variables if they have been
#initalised by implied memory addresses
       {                    
          ADD(one);
          STV(negative_one);
       }; #closing ';' at end of scope is optional

       ; #empty statement

       { } #empty scope                                

#definitions can appear anywhere,
#but must be stated before using the variable
#Duplicate definitions that are only executed once (e.g
#        §define x;
#        --code--
#        §define x; that is not executed)
#are fine but should be avoided
§define pow; 

#jump declaration (*). May only be stated once per scope.
Loop : LDV(val);
       EQL(zero);

       JMN(Stop); #references are used as arguments
       LDV(val);
       ADD(negative_one);
       STV(val);

       JMP(Loop); #jumps to (*)

Stop : HALT(); #stop the program